# To use this, you need to define the following environment variables before starting Logstash
#
# wm.is.db.host  -  The database server hostname
# wm.is.db.port  -  Port on which the db server is listening
# wm.is.db.name  -  Database instance/schema name
# wm.is.db.user  -  Username which has read access
# wm.is.db.password  - Password
# db.lib  -  The file location of the jdbc driver jar to access the database, such as the sqljdbc.jar
#
# Note, Change the connection string if you're sensibly using some alternative db other than MS SQL Server
#
# For each log file on each host you need another jdbc {...} entry.  Not great, but that's all we have.
# Note, you cant run this in a cluster deployment, with each having this config or you risk multiple polling of
# the same database.  Running a separate logstash instance for database polling keeps your cluster tidy and stateless.
#
input {
    jdbc {
        jdbc_connection_string => "jdbc:sqlserver://${wm.is.db.host}:${wm.is.db.port};databaseName=${wm.is.db.name}"
        jdbc_user => "${wm.is.db.user}"
        jdbc_password => "${wm.is.db.password}"
        jdbc_driver_library => "${db.lib}"
        jdbc_driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
        statement => "SELECT * FROM [dbo].[WMERROR] WHERE inserttimestamp > :sql_last_value"
        use_column_value => true
        tracking_column => inserttimestamp
        type => "wmisdberror"
    }
}
